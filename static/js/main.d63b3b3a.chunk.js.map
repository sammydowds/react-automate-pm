{"version":3,"sources":["components/HeaderComponent.js","components/sub/LoadingComponent.js","components/sub/ProjectWorkInProgressComponent.js","components/sub/ProjectOffTrackComponent.js","components/sub/ProjectRecentUpdateComponent.js","components/forms/UpdateProjectFormComponent.js","components/forms/UpdatePhaseFormComponent.js","components/forms/CreatePhaseModalComponent.js","components/sub/ProjectDetailsComponent.js","components/forms/CreateProjectModalComponent.js","components/sub/LeftMenuComponent.js","components/HomeComponent.js","redux/ActionCreators.js","shared/projects.js","shared/phases.js","redux/ActionTypes.js","components/MainComponent.js","redux/projects.js","redux/phases.js","redux/ui.js","redux/configureStore.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","state","isNavOpen","toggleNav","bind","this","setState","Navbar","className","fixed","expand","NavbarBrand","src","height","width","alt","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","Component","Loading","Spinner","type","color","renderProj","projects","phases","handleClicked","projects_rend","map","project","on_schedule","status","phases_rend","active_phases","active_phases_lst","phase","phase_end","moment","end","Badge","name","fromNow","renderPhases","filter","id","projectId","active","style","fontweight","class","viewBox","fill","xmlns","fill-rule","d","ProjectWorkInProgress","projectsLoading","Row","Col","Card","CardBody","CardTitle","lead","CardSubtitle","CardText","handleProjectClicked","ProjectOff","offtrack_projects","length","fontSize","ProjectRecent","recent_projects","lastupdated","subtract","required","val","maxLength","len","UpdateProjectForm","values","proj_id","updateProject","closeProjectUpdateModal","onSubmit","handleSubmit","Label","htmlFor","md","text","model","defaultValue","validators","minLength","show","messages","checkbox","complete","Button","UpdatePhaseForm","handleUpdate","handleChange","phase_id","updatePhase","closePhaseUpdateModal","console","log","onUpdate","onChange","input","start","CreatePhaseForm","createPhase","closePhaseCreateModal","Modal","phaseCreateModal","open","toggle","ModalHeader","ModalBody","ProjectDetails","document","getElementById","scrollIntoView","behavior","phase_start","Fragment","scope","format","date","diff","openPhaseUpdateModal","phaseUpdateModal","phase_selected","obj","phaseId","projectUpdateModal","proj_phases","renderPhase","openProjectUpdateModal","Table","size","hover","responsive","outline","openPhaseCreateModal","handleCloseDetails","renderPhaseForm","renderProjectForm","CreateProjectForm","createProject","closeProjectCreateModal","projectCreateModal","LeftMenu","ListGroup","vertical","flush","ListGroupItem","tag","action","openProjectCreateModal","clip-rule","disabled","numProjects","renderHome","Container","fluid","Alert","fade","href","lg","openDetails","projectDetails","closeDetails","PROJECTS_DB","PHASES_DB","normalizeResponse","response","new_schema","schema","Entity","attributeId","normalize","entities","addProjects","payload","createNewProject","createNewPhase","updateProj","updatePhaseDetails","phasesLoading","addPhases","Main","fetchProjects","fetchPhases","path","component","Object","isLoading","userinterface","withRouter","connect","dispatch","response_proj","projs","response_phases","phases_local","projectUpdates","assign","Date","toISOString","proj_changed","phaseUpdates","phase_changed","projectSelected","projects_len","push","phases_len","phasesDetails","Projects","errMess","new_state","new_project","edit_state","Phases","new_phase","UserInterface","openProjectDetails","opendetails_state","closeProjectDetails","closedetails_state","openPhaseModal","openphasemodal_state","closePhaseModal","closephasemodal_state","openProjectModal","openprojmodal_state","closeProjectModal","closeprojmodal_state","openprojcrmodal_state","closeprojcrmodal_state","openphasecrmodal_state","closephasecrmodal_state","default_userinterface","store","createStore","combineReducers","applyMiddleware","thunk","logger","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d63b3b3a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n} from 'reactstrap';\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      isNavOpen: false\n    };\n    this.toggleNav = this.toggleNav.bind(this);\n  }\n\n  toggleNav() {\n    this.setState({\n      isNavOpen: !this.state.isNavOpen\n    });\n  }\n\n  render() {\n    return(\n      <div>\n        <Navbar className=\"navbar-style\" fixed=\"top\" expand=\"lg\">\n          <NavbarBrand className=\"navbar-style\">\n            <img src=\"assets/images/profileprojectile.png\" height=\"55\" width=\"55\" alt=\"\"/>\n            Projectile\n          </NavbarBrand>\n          <NavbarToggler onClick={this.toggleNav} />\n            <Collapse isOpen={this.state.isNavOpen} navbar>\n              <Nav className=\"mr-auto\" navbar>\n              </Nav>\n            </Collapse>\n        </Navbar>\n      </div>\n    );\n  }\n}\nexport default Header;\n","import React from 'react';\nimport { Spinner } from 'reactstrap'; \n\nexport const Loading = () => {\n  return (\n    <div className=\"h-100 text-center align-middle\">\n      <Spinner type=\"grow\" color=\"warning\" />\n    </div>\n  );\n};\n","import React from 'react';\nimport moment from 'moment'; \nimport {  \n  Col, \n  Badge, \n  Card,\n  CardBody, \n  CardSubtitle, \n  CardTitle, \n  CardText, \n  Row\n } from 'reactstrap';\nimport { Loading } from './LoadingComponent'; \n\nfunction renderPhases(active_phases) {\n  const active_phases_lst = active_phases.map((phase) => {\n    const phase_end = moment(phase.end); \n    return(\n      <span className=\"px-1\">\n        <Badge color=\"dark\">\n          {phase.name} {phase_end.fromNow()}\n        </Badge>\n      </span>\n    ); \n  }); \n  return(\n    <span>{active_phases_lst}</span>\n  ); \n}\n\nfunction renderProj(projects, phases, handleClicked) {\n  if (projects) {\n    const projects_rend = projects.map((project) => {\n      const on_schedule = project.status;\n      // filtering for phases related to this project\n      const proj_phases = phases.filter((phase) => project.id === phase.projectId); \n      const active_phases = proj_phases.filter((phase) => phase.active);\n      const phases_rend = renderPhases(active_phases); \n      return(\n        <span>\n          <p style={{fontweight: 'superbold'}}>\n            <span className=\"pr-2\">\n                <svg class=\"bi bi-box-seam\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path fill-rule=\"evenodd\" d=\"M8.186 1.113a.5.5 0 0 0-.372 0L1.846 3.5l2.404.961L10.404 2l-2.218-.887zm3.564 1.426L5.596 5 8 5.961 14.154 3.5l-2.404-.961zm3.25 1.7l-6.5 2.6v7.922l6.5-2.6V4.24zM7.5 14.762V6.838L1 4.239v7.923l6.5 2.6zM7.443.184a1.5 1.5 0 0 1 1.114 0l7.129 2.852A.5.5 0 0 1 16 3.5v8.662a1 1 0 0 1-.629.928l-7.185 2.874a.5.5 0 0 1-.372 0L.63 13.09a1 1 0 0 1-.63-.928V3.5a.5.5 0 0 1 .314-.464L7.443.184z\"/>\n                </svg>\n                &nbsp; \n                <span className=\"project-link\" onClick={() => {handleClicked(project.id);}}>\n                  {project.name}\n                </span>\n              &nbsp; \n\n            </span>\n            <p className=\"ml-4\">\n              { on_schedule\n                ? <span>\n                    <Badge color=\"success\">On Track</Badge>\n                  </span>\n                : <span>\n                    <Badge className=\"off-badge\">Off Track</Badge>\n                  </span>\n              } | \n              {phases_rend}\n            </p>\n            <p className=\"ml-4\">\n            </p>\n          </p>  \n        </span>  \n      ); \n    }); \n    return (\n      <span>\n        {projects_rend}\n      </span>\n    ); \n  } else {\n    return(\n    <div>wtf</div>); \n  }\n}\n\nfunction ProjectWorkInProgress(props) {\n  if (props.projectsLoading) {\n    return(\n      <Row>\n        <Col>\n          <Card className=\"my-2 text-center card-border\">\n            <CardBody className=\"text-left\">\n              <CardTitle className=\"pl-2\">\n                <h4 lead>\n                  Open Projects: Work In Progress\n                </h4>\n              </CardTitle>\n              <CardSubtitle className=\"pl-2\">\n                <hr></hr>\n              </CardSubtitle>\n              <CardText className=\"font-weight-bold\"><Loading /></CardText>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    );\n  } else {\n    return(\n      <Row>\n        <Col>\n          <Card className=\"my-2 text-center card-border\">\n            <CardBody className=\"text-left\">\n              <CardTitle className=\"pl-2\">\n                <h4 lead>\n                  Open Projects: Work In Progress\n                </h4>\n              </CardTitle>\n              <CardSubtitle className=\"pl-2\">\n                <hr></hr>\n              </CardSubtitle>\n              <CardText className=\"pt-1 pl-4 font-weight-bold\">{renderProj(props.projects, props.phases, props.handleProjectClicked)}</CardText>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    );\n  }\n}\n\n\nexport default ProjectWorkInProgress; \n\n","import React from 'react';\nimport {  \n  Col, \n  Badge, \n  Card,\n  CardBody, \n  CardSubtitle, \n  CardTitle, \n  CardText, \n  Row\n } from 'reactstrap';\nimport { Loading } from './LoadingComponent'; \n\n\nfunction renderProj(projects, handleClicked) {\n  const projects_rend = projects.map((project) => {\n    return(\n      <span>\n        <p style={{fontweight: 'superbold', fontSize: \"12px\"}}>\n          <span>\n            <span className=\"project-link\" onClick={() => {handleClicked(project.id);}}>\n              {project.name}\n            </span>\n            &nbsp; \n            <svg class=\"bi bi-flag-fill\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"#ffa41b\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path fill-rule=\"evenodd\" d=\"M3.5 1a.5.5 0 0 1 .5.5v13a.5.5 0 0 1-1 0v-13a.5.5 0 0 1 .5-.5z\"/>\n              <path fill-rule=\"evenodd\" d=\"M3.762 2.558C4.735 1.909 5.348 1.5 6.5 1.5c.653 0 1.139.325 1.495.562l.032.022c.391.26.646.416.973.416.168 0 .356-.042.587-.126a8.89 8.89 0 0 0 .593-.25c.058-.027.117-.053.18-.08.57-.255 1.278-.544 2.14-.544a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-.5.5c-.638 0-1.18.21-1.734.457l-.159.07c-.22.1-.453.205-.678.287A2.719 2.719 0 0 1 9 9.5c-.653 0-1.139-.325-1.495-.562l-.032-.022c-.391-.26-.646-.416-.973-.416-.833 0-1.218.246-2.223.916A.5.5 0 0 1 3.5 9V3a.5.5 0 0 1 .223-.416l.04-.026z\"/>\n            </svg> \n          </span>\n        </p>  \n      </span>  \n    ); \n  }); \n  return (\n    <span>\n      {projects_rend}\n    </span>\n  ); \n}\n\nfunction ProjectOff(props) {\n  if (props.projectsLoading) {\n    return(\n      <Row>\n        <Col>\n          <Card className=\"mt-2 card-border\">\n            <CardBody>\n              <CardTitle className=\"pl-2 normal-text text-center\">\n                <h6 lead>\n                  Off Track\n                </h6>\n              </CardTitle>\n              <CardSubtitle>\n                <hr></hr>\n              </CardSubtitle>\n              <CardText className=\"font-weight-bold text-left pl-2\"><Loading /></CardText>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    );\n  } else {\n    const offtrack_projects = props.projects.filter((project) => project.status === false); \n    return(\n      <Row>\n        <Col>\n          <Card className=\"mt-2 card-border\">\n            <CardBody>\n              <CardTitle className=\"pl-2 normal-text text-center\">\n                <h6 lead>\n                  Off Track <Badge className=\"off-badge\">{offtrack_projects.length}</Badge>\n                </h6>\n              </CardTitle>\n              <CardSubtitle>\n                <hr></hr>\n              </CardSubtitle>\n              <CardText className=\"font-weight-bold text-center\">{renderProj(offtrack_projects, props.handleProjectClicked)}</CardText>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    );\n  }\n}\n\n\nexport default ProjectOff; \n\n","import React from 'react';\nimport moment from 'moment'; \nimport {  \n  Col, \n  Badge, \n  Card,\n  CardBody, \n  CardSubtitle, \n  CardTitle, \n  CardText, \n  Row\n } from 'reactstrap';\nimport { Loading } from './LoadingComponent'; \n\n\nfunction renderProj(projects, handleClicked) {\n  if (projects != null){\n    const projects_rend = projects.map((project) => {\n      return(\n        <span>\n          <p style={{fontweight: 'superbold', fontSize: \"12px\"}}>\n            <span>\n              <span className=\"project-link\" onClick={() => {handleClicked(project.id);}}>\n                {project.name}\n              </span>\n              &nbsp; \n              <svg class=\"bi bi-flag-fill\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"#000839\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path fill-rule=\"evenodd\" d=\"M3.5 1a.5.5 0 0 1 .5.5v13a.5.5 0 0 1-1 0v-13a.5.5 0 0 1 .5-.5z\"/>\n                <path fill-rule=\"evenodd\" d=\"M3.762 2.558C4.735 1.909 5.348 1.5 6.5 1.5c.653 0 1.139.325 1.495.562l.032.022c.391.26.646.416.973.416.168 0 .356-.042.587-.126a8.89 8.89 0 0 0 .593-.25c.058-.027.117-.053.18-.08.57-.255 1.278-.544 2.14-.544a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-.5.5c-.638 0-1.18.21-1.734.457l-.159.07c-.22.1-.453.205-.678.287A2.719 2.719 0 0 1 9 9.5c-.653 0-1.139-.325-1.495-.562l-.032-.022c-.391-.26-.646-.416-.973-.416-.833 0-1.218.246-2.223.916A.5.5 0 0 1 3.5 9V3a.5.5 0 0 1 .223-.416l.04-.026z\"/>\n              </svg> \n            </span>\n          </p>  \n        </span>  \n      ); \n    }); \n    return (\n      <span>\n        {projects_rend}\n      </span>\n    ); \n  } else {\n    return(<div>WTF</div>); \n  }\n}\n\nfunction ProjectRecent (props) {\n  if (props.projectsLoading) {\n    return(\n      <Row>\n        <Col>\n          <Card className=\"mt-2 card-border\">\n            <CardBody>\n              <CardTitle className=\"pl-2 normal-text text-center\">\n                <h6 lead>\n                  Recent Changes\n                </h6>\n              </CardTitle>\n              <CardSubtitle>\n                <hr></hr>\n              </CardSubtitle>\n              <CardText className=\"font-weight-bold text-left pl-2\"><Loading /></CardText>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    );\n  } else {\n    const recent_projects = props.projects.filter((project) => moment(project.lastupdated, \"YYYY-MM-DD\") > moment().subtract(7, \"days\")); \n    return(\n      <Row>\n        <Col>\n          <Card className=\"mt-2 card-border\">\n            <CardBody>\n              <CardTitle className=\"pl-2 normal-text text-center\">\n                <h6 lead>\n                  Recent Changes <Badge className=\"off-badge\">{recent_projects.length}</Badge>\n                </h6>\n              </CardTitle>\n              <CardSubtitle>\n                <hr></hr>\n              </CardSubtitle>\n              <CardText className=\"font-weight-bold text-center\">{renderProj(recent_projects, props.handleProjectClicked)}</CardText>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    );\n  }\n}\n\n\nexport default ProjectRecent; \n\n","import React, { Component } from 'react';\nimport {  \n  Row, \n  Col,\n  Label,\n  Button \n } from 'reactstrap';\n import { Control, LocalForm, Errors } from 'react-redux-form';\n\n\n\nconst required = (val) => val && val.length;\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\nconst minLength = (len) => (val) => (val) && (val.length >= len);\n\nclass UpdateProjectForm extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  handleSubmit(values) {\n    const proj_id = this.props.project.id; \n    this.props.updateProject(proj_id, values);\n    this.props.closeProjectUpdateModal(); \n  }\n\n  render() {\n    return (\n      <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\n        <Row className=\"form-group text-center\">\n          <Label htmlFor=\"author\" md={4}><strong>Project Name: </strong></Label>\n          <Col md={8}>\n            <Control.text model=\".name\" id=\"author\" name=\"author\"\n              defaultValue={this.props.project.name}\n              className=\"form-control\"\n              validators={{\n                required, minLength: minLength(5), maxLength: maxLength(50)\n              }} />\n              <Errors\n                className=\"text-danger\"\n                model=\".author\"\n                show=\"touched\"\n                messages={{\n                  required: 'Required',\n                  minLength: 'Must be greater than 5 characters',\n                  maxLength: 'Must be 50 characters or less'\n                }}\n              />\n          </Col>\n        </Row>\n        <Row className=\"text-center m-2\">\n          <Col md={5}>Status of Project:</Col>\n          <Col>\n              <div className=\"field\">\n                  <Control.checkbox\n                  model=\".status\"\n                  defaultValue={this.props.project.status}\n                  />\n                  &nbsp; \n                  <strong> Project is On Track</strong>\n              </div>\n            </Col>\n        </Row>\n        <Row className=\"text-center m-2\">\n          <Col md={5}>Project Active: </Col>\n          <Col>\n              <div className=\"field\">\n                  <Control.checkbox\n                  model=\".complete\"\n                  defaultValue={this.props.project.complete}\n                  />\n                  &nbsp; \n                  <strong> Project is Complete</strong>\n              </div>\n            </Col>\n        </Row>\n        <Row className=\"text-center\">\n          <Col>\n            <Button type=\"submit\">Submit</Button>\n          </Col>\n        </Row>\n      </LocalForm>\n    );\n  }\n}\n\nexport default UpdateProjectForm; ","import React, { Component } from 'react';\nimport {  \n  Row,\n  Col,  \n  Label, \n  Button\n } from 'reactstrap';\n import { Control, LocalForm } from 'react-redux-form';\n\nclass UpdatePhaseForm extends Component {\n\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleSubmit(values) {\n    const phase_id = this.props.phase.id; \n    this.props.updatePhase(phase_id, values); \n    this.props.closePhaseUpdateModal(); \n    // this.props.postComment(this.props.dishId, values.rating, values.author, values.comment);\n  }\n\n  handleChange(values) {\n    console.log(\"CHANGE\"); \n    console.log(values); \n    // this.props.postComment(this.props.dishId, values.rating, values.author, values.comment);\n  }\n\n  handleUpdate(values) {\n    console.log(\"UDPATE\"); \n    console.log(values); \n    // this.props.postComment(this.props.dishId, values.rating, values.author, values.comment);\n  }\n\n\n\n  render() {\n    return (\n      <LocalForm \n        onUpdate={(values) => this.handleUpdate(values)} \n        onChange={(values) => this.handleChange(values)} \n        onSubmit={(values) => this.handleSubmit(values)}>\n        <Row className=\"m-2\">\n          <Col>\n            <Label>Start Date:</Label>\n          </Col>\n          <Col md={8}>\n            <Control.input \n                type=\"date\" \n                defaultValue={this.props.phase.start}\n                model=\".start\"\n                id=\"idk\"\n                name=\"idk\"\n                className=\"form-control\"\n            >\n          </Control.input>\n          </Col>\n        </Row>\n        <Row className=\"m-2\">\n          <Col>\n            <Label>End Date:</Label>\n          </Col>\n          <Col md={8}>\n            <Control.input \n                type=\"date\" \n                defaultValue={this.props.phase.end}\n                model=\".end\"\n                id=\"phaseEnd\"\n                name=\"phaseEnd\"\n                className=\"form-control\"\n            >\n          </Control.input>\n          </Col>\n        </Row>\n        <Row className=\"text-center m-2\">\n          <Col md={5}>Status of Project:</Col>\n          <Col>\n              <div className=\"field\">\n                  <Control.checkbox\n                  model=\".active\"\n                  defaultValue={this.props.phase.active}\n                  />\n                  &nbsp; \n                  <strong> Work in Progress</strong>\n              </div>\n            </Col>\n        </Row>\n        <Row className=\"text-center m-2\">\n          <Col md={5}>Project Active: </Col>\n          <Col>\n              <div className=\"field\">\n                  <Control.checkbox\n                  model=\".complete\"\n                  defaultValue={this.props.phase.complete}\n                  />\n                  &nbsp; \n                  <strong> Phase is Complete</strong>\n              </div>\n            </Col>\n        </Row>\n        <Row className=\"text-center\">\n          <Col>\n            <Button type=\"submit\">Submit</Button>\n          </Col>\n        </Row>\n      </LocalForm>\n    );\n  }\n}\n\nexport default UpdatePhaseForm; ","import React, { Component } from 'react';\nimport {  \n  Row, \n  Col,\n  Label,\n  Button, \n  Modal, \n  ModalHeader, \n  ModalBody\n } from 'reactstrap';\n import { Control, LocalForm, Errors } from 'react-redux-form';\n\nconst required = (val) => val && val.length;\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\nconst minLength = (len) => (val) => (val) && (val.length >= len);\n\nclass CreatePhaseForm extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  handleSubmit(projectId, values) {\n    this.props.createPhase(projectId, values);\n    this.props.closePhaseCreateModal(); \n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.phaseCreateModal.open} toggle={this.props.closePhaseCreateModal} className=\"text-center\">\n        <ModalHeader toggle={this.props.closePhaseCreateModal} className=\"off-badge\">Create New Phase</ModalHeader>\n          <ModalBody>\n          <LocalForm onSubmit={(values) => this.handleSubmit(this.props.projectId, values)}>\n              <Row className=\"form-group text-center\">\n                <Label htmlFor=\"author\" md={4}><strong>Phase Name: </strong></Label>\n                <Col md={8}>\n                  <Control.text model=\".name\" id=\"author\" name=\"author\"\n                    className=\"form-control\"\n                    validators={{\n                      required, minLength: minLength(1), maxLength: maxLength(50)\n                    }} />\n                    <Errors\n                      className=\"text-danger\"\n                      model=\".author\"\n                      show=\"touched\"\n                      messages={{\n                        required: 'Required',\n                        minLength: 'Must be greater than 5 characters',\n                        maxLength: 'Must be 20 characters or less'\n                      }}\n                    />\n                </Col>\n              </Row>\n              <Row className=\"m-2\">\n                <Col>\n                  <Label>Start Date:</Label>\n                </Col>\n                <Col md={8}>\n                  <Control.input \n                      type=\"date\" \n                      model=\".start\"\n                      id=\"idk\"\n                      name=\"idk\"\n                      className=\"form-control\"\n                  >\n                </Control.input>\n                </Col>\n              </Row>\n              <Row className=\"m-2\">\n                <Col>\n                  <Label>End Date:</Label>\n                </Col>\n                <Col md={8}>\n                  <Control.input \n                      type=\"date\" \n                      model=\".end\"\n                      id=\"phaseEnd\"\n                      name=\"phaseEnd\"\n                      className=\"form-control\"\n                  >\n                </Control.input>\n                </Col>\n              </Row>\n              <Row className=\"text-center m-2\">\n                <Col md={5}>Status of Project:</Col>\n                <Col>\n                    <div className=\"field\">\n                        <Control.checkbox\n                        model=\".active\"\n                        />\n                        &nbsp; \n                        <strong> Work in Progress</strong>\n                    </div>\n                  </Col>\n              </Row>\n              <Row className=\"text-center m-2\">\n                <Col md={5}>Project Active: </Col>\n                <Col>\n                    <div className=\"field\">\n                        <Control.checkbox\n                        model=\".complete\"\n                        />\n                        &nbsp; \n                        <strong> Phase is Complete</strong>\n                    </div>\n                  </Col>\n              </Row>\n              <Row className=\"text-center\">\n                <Col>\n                  <Button type=\"submit\">Submit</Button>\n                </Col>\n              </Row>\n            </LocalForm>\n          </ModalBody>\n        </Modal>\n    );\n  }\n}\n\nexport default CreatePhaseForm; ","import React, { Component } from 'react';\nimport moment from 'moment'; \nimport {  \n  Badge, \n  Card,\n  CardBody, \n  CardSubtitle, \n  CardTitle, \n  CardText, \n  Button,\n  Table,\n  Modal, \n  ModalHeader, \n  ModalBody\n } from 'reactstrap';\nimport { Loading } from './LoadingComponent';\nimport UpdateProjectForm from '../forms/UpdateProjectFormComponent'; \nimport UpdatePhaseForm from '../forms/UpdatePhaseFormComponent';\nimport CreatePhaseForm from '../forms/CreatePhaseModalComponent';  \n\nclass ProjectDetails extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    if (document.getElementById('projDetails')) {\n      const element = document.getElementById('projDetails'); \n      element.scrollIntoView({behavior: \"smooth\"}); \n    }\n  }\n\n  renderPhase(phase) {\n    const phase_end = moment(phase.end, \"YYYY-MM-DD\");\n    const phase_start = moment(phase.start, \"YYYY-MM-DD\")\n    return(\n        <React.Fragment>\n          <th scope=\"row\">\n            { phase.active\n              ? <span className=\"text-danger font-weight-light\"> <Badge color=\"warning\"> WIP </Badge></span>\n              : <div></div>\n            } \n            { phase.complete\n              ? <span className=\"text-danger font-weight-light\"> <Badge color=\"success\"> Done </Badge></span>\n              : <div></div>\n            } \n          </th>\n          <td>{phase.name}</td>\n          <td>{phase_start.format(\"M\")}/{phase_start.date()} ({phase_start.format(\"ddd\")})</td>\n          <td>{phase_end.format(\"M\")}/{phase_end.date()} ({phase_end.format(\"ddd\")})</td>\n          <td>{phase_end.fromNow()}</td>\n          <td>{phase_end.diff(phase_start, \"days\")}</td>\n          <td>\n            <div onClick={() => {this.props.openPhaseUpdateModal(phase.id)}}>\n              <svg class=\"bi bi-pencil\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path fill-rule=\"evenodd\" d=\"M11.293 1.293a1 1 0 0 1 1.414 0l2 2a1 1 0 0 1 0 1.414l-9 9a1 1 0 0 1-.39.242l-3 1a1 1 0 0 1-1.266-1.265l1-3a1 1 0 0 1 .242-.391l9-9zM12 2l2 2-9 9-3 1 1-3 9-9z\"/>\n                <path fill-rule=\"evenodd\" d=\"M12.146 6.354l-2.5-2.5.708-.708 2.5 2.5-.707.708zM3 10v.5a.5.5 0 0 0 .5.5H4v.5a.5.5 0 0 0 .5.5H5v.5a.5.5 0 0 0 .5.5H6v-1.5a.5.5 0 0 0-.5-.5H5v-.5a.5.5 0 0 0-.5-.5H3z\"/>\n              </svg>\n            </div>\n          </td>\n        </React.Fragment>\n    ); \n  }\n\n  renderPhaseForm() { \n    if (this.props.phaseUpdateModal.open) {\n      const phase_selected = this.props.phases.filter(obj => {return obj.id === this.props.phaseUpdateModal.phaseId})[0]; \n      return(\n        <Modal isOpen={this.props.phaseUpdateModal.open} className=\"text-center\">\n          <ModalHeader toggle={this.props.closePhaseUpdateModal} className=\"off-badge\">Update Phase: {phase_selected.name}</ModalHeader>\n          <ModalBody>\n            <UpdatePhaseForm \n              phase={phase_selected} \n              updatePhase={this.props.updatePhase} \n              closePhaseUpdateModal={this.props.closePhaseUpdateModal}\n            />\n          </ModalBody>\n        </Modal>\n      ); \n    }\n  }\n\n  renderProjectForm() {\n    return(\n      <Modal isOpen={this.props.projectUpdateModal.open}>\n        <ModalHeader toggle={this.props.closeProjectUpdateModal} className=\"off-badge\">Update {this.props.project.name}</ModalHeader>\n        <ModalBody>\n          <UpdateProjectForm \n            project={this.props.project} \n            updateProject={this.props.updateProject}\n            closeProjectUpdateModal={this.props.closeProjectUpdateModal}\n          />\n        </ModalBody>\n      </Modal>\n    ); \n  }\n\n  render() {\n    if (this.props.projectsLoading) {\n      return(\n        <Loading />\n      );\n    } else {\n      const proj_phases = this.props.phases.map((phase)=> {\n        return(\n            <tr>\n              {this.renderPhase(phase)}\n            </tr>\n        ); \n      });\n      return(\n        <div id='projDetails'>\n          <Card className=\"my-2 card-border\">\n            <CardBody className=\"text-left\">\n              <CardTitle className=\"pl-2 text-center\">\n                <h3 lead>\n                {this.props.project.name}\n                &nbsp;\n                { this.props.project.status\n                  ? <span>\n                      <Badge color=\"success\" className=\"ml-1\">On Track</Badge>\n                    </span>\n                  : <span>\n                      <Badge className=\"off-badge ml-1\">Off Track</Badge>\n                    </span>\n                }\n                &nbsp;\n                <span onClick={() => {this.props.openProjectUpdateModal(this.props.project.id)}}>\n                  <svg class=\"bi bi-pencil\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path fill-rule=\"evenodd\" d=\"M11.293 1.293a1 1 0 0 1 1.414 0l2 2a1 1 0 0 1 0 1.414l-9 9a1 1 0 0 1-.39.242l-3 1a1 1 0 0 1-1.266-1.265l1-3a1 1 0 0 1 .242-.391l9-9zM12 2l2 2-9 9-3 1 1-3 9-9z\"/>\n                    <path fill-rule=\"evenodd\" d=\"M12.146 6.354l-2.5-2.5.708-.708 2.5 2.5-.707.708zM3 10v.5a.5.5 0 0 0 .5.5H4v.5a.5.5 0 0 0 .5.5H5v.5a.5.5 0 0 0 .5.5H6v-1.5a.5.5 0 0 0-.5-.5H5v-.5a.5.5 0 0 0-.5-.5H3z\"/>\n                  </svg>\n                </span>\n              </h3>\n                <hr></hr>\n              </CardTitle>\n              <CardSubtitle className=\"mb-2 lead text-center\">\n                Project Phases \n              </CardSubtitle>\n              <CardText className=\"pl-3 pb-3\">\n                  <Table size=\"sm\" className=\"text-center overflow-auto\" hover responsive>\n                    <thead>\n                      <tr>\n                        <th>Status</th>\n                        <th>Phase</th>\n                        <th>Start</th>\n                        <th>End</th>\n                        <th>Rel. End</th>\n                        <th>Duration (Days)</th>\n                        <th></th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {proj_phases}\n                    </tbody>\n                  </Table>\n              </CardText>\n              <div className=\"text-right\">\n                <Button size=\"sm\" className=\"align-end\" outline color=\"success\" onClick={this.props.openPhaseCreateModal}>Add Phase</Button>\n                &nbsp; \n                <Button size=\"sm\" className=\"align-end\" outline color=\"dark\" onClick={this.props.handleCloseDetails}>Close Details</Button>\n                {this.renderPhaseForm()}\n                {this.renderProjectForm()}\n                <CreatePhaseForm \n                  phaseCreateModal={this.props.phaseCreateModal} \n                  closePhaseCreateModal={this.props.closePhaseCreateModal} \n                  createPhase={this.props.createPhase}\n                  projectId={this.props.project.id}\n                  >\n                </CreatePhaseForm>\n              </div>\n            </CardBody>\n          </Card>\n        </div>\n      );\n    }\n  }\n}; \n\n\nexport default ProjectDetails; \n","import React, { Component } from 'react';\nimport {  \n  Row, \n  Col,\n  Label,\n  Button, \n  Modal, \n  ModalHeader, \n  ModalBody\n } from 'reactstrap';\n import { Control, LocalForm, Errors } from 'react-redux-form';\n\n\n\nconst required = (val) => val && val.length;\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\nconst minLength = (len) => (val) => (val) && (val.length >= len);\n\nclass CreateProjectForm extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  handleSubmit(values) {\n    this.props.createProject(values);\n    this.props.closeProjectCreateModal(); \n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.projectCreateModal.open} toggle={this.props.closeProjectCreateModal} className=\"text-center\">\n        <ModalHeader toggle={this.props.closeProjectCreateModal} className=\"off-badge\">Create New Project</ModalHeader>\n          <ModalBody>\n            <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\n              <Row className=\"form-group text-center\">\n                <Label htmlFor=\"author\" md={4}><strong>Project Name: </strong></Label>\n                <Col md={8}>\n                  <Control.text model=\".name\" id=\"author\" name=\"author\"\n                    className=\"form-control\"\n                    validators={{\n                      required, minLength: minLength(1), maxLength: maxLength(50)\n                    }} />\n                    <Errors\n                      className=\"text-danger\"\n                      model=\".author\"\n                      show=\"touched\"\n                      messages={{\n                        required: 'Required',\n                        minLength: 'Must be greater than 5 characters',\n                        maxLength: 'Must be 50 characters or less'\n                      }}\n                    />\n                </Col>\n              </Row>\n              <Row className=\"text-center m-2\">\n                <Col md={5}>Status of Project:</Col>\n                <Col>\n                    <div className=\"field\">\n                        <Control.checkbox\n                        model=\".status\"\n                        />\n                        &nbsp; \n                        <strong> Project is On Track</strong>\n                    </div>\n                  </Col>\n              </Row>\n              <Row className=\"text-center m-2\">\n                <Col md={5}>Project Active: </Col>\n                <Col>\n                    <div className=\"field\">\n                        <Control.checkbox\n                        model=\".complete\"\n                        />\n                        &nbsp; \n                        <strong> Project is Complete</strong>\n                    </div>\n                  </Col>\n              </Row>\n              <Row className=\"text-center\">\n                <Col>\n                  <Button type=\"submit\">Create</Button>\n                </Col>\n              </Row>\n            </LocalForm>\n          </ModalBody>\n        </Modal>\n    );\n  }\n}\n\nexport default CreateProjectForm; ","import React from 'react'; \nimport {\n    Card, \n    ListGroup, \n    ListGroupItem, \n    Badge\n} from 'reactstrap';\nimport CreateProjectForm from '../forms/CreateProjectModalComponent'; \n\nconst LeftMenu = (props) => {\n    return(\n        <React.Fragment>\n            <Card className=\"mt-1 font-weight-bold card-border\">\n                <ListGroup vertical className=\"text-center w-100\" flush>\n                    <ListGroupItem className=\"text-center\" tag=\"button\" action onClick={props.openProjectCreateModal}>\n                        <div>\n                            <svg class=\"bi bi-plus-circle\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path fill-rule=\"evenodd\" d=\"M8 3.5a.5.5 0 01.5.5v4a.5.5 0 01-.5.5H4a.5.5 0 010-1h3.5V4a.5.5 0 01.5-.5z\" clip-rule=\"evenodd\"/>\n                            <path fill-rule=\"evenodd\" d=\"M7.5 8a.5.5 0 01.5-.5h4a.5.5 0 010 1H8.5V12a.5.5 0 01-1 0V8z\" clip-rule=\"evenodd\"/>\n                            <path fill-rule=\"evenodd\" d=\"M8 15A7 7 0 108 1a7 7 0 000 14zm0 1A8 8 0 108 0a8 8 0 000 16z\" clip-rule=\"evenodd\"/>\n                            </svg>\n                            &nbsp; \n                            <strong>Add Project</strong>\n                        </div>\n                    </ListGroupItem>\n                    <ListGroupItem tag=\"button\" className=\"text-center\" action disabled>All Projects <Badge> {props.numProjects} </Badge></ListGroupItem>\n                    <ListGroupItem tag=\"button\" className=\"text-center\" action disabled>Learn</ListGroupItem>\n                    <ListGroupItem tag=\"button\" className=\"text-center\" disabled>My Profile</ListGroupItem>\n                </ListGroup>\n            </Card>\n            <CreateProjectForm \n                projectCreateModal={props.projectCreateModal} \n                closeProjectCreateModal={props.closeProjectCreateModal} \n                createProject={props.createProject}>\n            </CreateProjectForm>\n        </React.Fragment>\n\n    ); \n}\n\nexport default LeftMenu; \n","import React from 'react';\nimport { \n  Container, \n  Row, \n  Col, \n  Alert\n } from 'reactstrap';\nimport ProjectWorkInProgress from './sub/ProjectWorkInProgressComponent'; \nimport ProjectOff from './sub/ProjectOffTrackComponent'; \nimport ProjectRecent from './sub/ProjectRecentUpdateComponent'; \nimport ProjectDetails from './sub/ProjectDetailsComponent'; \nimport LeftMenu from './sub/LeftMenuComponent'; \n\nfunction renderHome(props) {\n  return(\n    <Container className=\"container-spacing\" fluid={true}>\n      <Row>\n        <Col>\n          <Alert color=\"danger\" className=\"text-center mt-3\" fade={false}>\n              <h4 className=\"alert-heading\">Black Lives Matter.</h4>\n              <p>\n                Here at Projectile we believe in accomplishing big things - but only when others arent oppressed. \n                Help the cause. Help create a new history which does not repeat itself.\n              </p>\n              <p>\n                <h5><a href=\"https://blacklivesmatter.com/\">Learn More, and Take Action.</a></h5>\n              </p>\n          </Alert>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Alert color=\"warning\" className=\"text-center mt-1\" fade={false}>\n            Warning: This is a prototype only, and not suitable for production.\n          </Alert>\n        </Col>\n      </Row>\n      <Row className=\"h-100 justify-content-center\">\n        <Col lg=\"2\">\n          <LeftMenu \n            numProjects={props.projects.length} \n            projectCreateModal={props.projectCreateModal} \n            openProjectCreateModal={props.openProjectCreateModal}\n            closeProjectCreateModal={props.closeProjectCreateModal}\n            createProject={props.createProject}\n          />\n          <ProjectOff \n            projects={props.projects} \n            projectsLoading={props.projectsLoading} \n            handleProjectClicked={props.openDetails} \n            />\n          <ProjectRecent \n            projects={props.projects} \n            projectsLoading={props.projectsLoading} \n            handleProjectClicked={props.openDetails} \n            />\n        </Col>\n\n        <Col lg=\"4\">\n          <ProjectWorkInProgress \n            projects={props.projects} \n            projectsLoading={props.projectsLoading} \n            handleProjectClicked={props.openDetails}\n            phases={props.phases}\n            />\n        </Col>\n\n        <Col lg=\"6\">\n          {props.projectDetails.open\n            ? <ProjectDetails \n                project={props.projects[props.projectDetails.projectId]} \n                phases={props.phases.filter((phase) => phase.projectId === props.projectDetails.projectId)}\n                handleCloseDetails={props.closeDetails} \n                updateProject={props.updateProject}\n                updatePhase={props.updatePhase}\n                createPhase={props.createPhase}\n                phaseUpdateModal={props.phaseUpdateModal}\n                phaseCreateModal={props.phaseCreateModal}\n                projectUpdateModal={props.projectUpdateModal}\n                openPhaseUpdateModal={props.openPhaseUpdateModal}\n                closePhaseUpdateModal={props.closePhaseUpdateModal}\n                openProjectUpdateModal={props.openProjectUpdateModal}\n                closeProjectUpdateModal={props.closeProjectUpdateModal}\n                openPhaseCreateModal={props.openPhaseCreateModal}\n                closePhaseCreateModal={props.closePhaseCreateModal}\n              />\n            : <div></div>\n          }\n        </Col>\n\n      </Row>\n\n\n    </Container>\n    \n  );\n}\n\n\nexport default renderHome; \n","import * as ActionTypes from './ActionTypes'; \nimport { baseUrl } from '../shared/baseUrl';\nimport { normalize, schema } from 'normalizr';\n//Simulating API locally  \nimport { PROJECTS } from '../shared/projects';\nimport { PHASES } from '../shared/phases';  \n\nlet PROJECTS_DB = PROJECTS; \nlet PHASES_DB = PHASES; \n//function to normalize an array of objects, returns normalized list of objects \nconst normalizeResponse = (response) => {\n  const new_schema = new schema.Entity('schema', {attributeId: 'id'});  \n  const norm_data = normalize(response, [new_schema]);\n  return norm_data.entities.schema;   \n}\n\n// THUNK\nexport const fetchProjects = () => (dispatch) => {\n    dispatch(projectsLoading(true));\n    //Simulating locally \n    const response_proj = PROJECTS_DB.projects; \n    const projs = normalizeResponse(response_proj); \n    dispatch(addProjects(projs)); \n    \n    // //for API \n    // return fetch(baseUrl + 'projects')\n    //   .then(response => {\n    //     if (response.ok) {\n    //       return response;\n    //     }\n    //     else {\n    //       var error = new Error('Error ' + response.status + ': ' + response.statusText);\n    //       error.response = response;\n    //       throw error;\n    //     }\n    //   },\n    //   error => {\n    //     var errmess= new Error(error.message);\n    //     throw errmess;\n    //   })\n    //   .then(response => response.json())\n    //   //normalizing response \n    //   .then(notNrmResp => normalizeResponse(notNrmResp))\n    //   .then(projects=> dispatch(addProjects(projects))) \n    //   .catch(error => dispatch(projectsFailed(error.message)));\n  \n  }\n\n  // THUNK to fetch phases \nexport const fetchPhases = () => (dispatch) => {\n  dispatch(phasesLoading(true));\n  //Simulating locally\n  const response_phases = PHASES_DB.phases; \n  const phases_local = normalizeResponse(response_phases); \n  dispatch(addPhases(phases_local)); \n  //for API \n  // return fetch(baseUrl + 'phases')\n  //   .then(response => {\n  //     if (response.ok) {\n  //       return response;\n  //     }\n  //     else {\n  //       var error = new Error('Error ' + response.status + ': ' + response.statusText);\n  //       error.response = response;\n  //       throw error;\n  //     }\n  //   },\n  //   error => {\n  //     var errmess= new Error(error.message);\n  //     throw errmess;\n  //   })\n  //   .then(response => response.json())\n  //   // normalizing response \n  //   .then(notNrmResp => normalizeResponse(notNrmResp))\n  //   .then(phases => dispatch(addPhases(phases)))\n  //   .catch(error => dispatch(phasesFailed(error.message)));\n\n}\n\n//Thunks CREATE Phase or Project \nexport const createProject = (values) => (dispatch) => {\n  //simulating locally\n  const projects_len = PROJECTS_DB.projects.length; \n  let projectDetails = Object.assign({}, values);\n  projectDetails.lastupdated = new Date().toISOString();\n  projectDetails.id = projects_len; \n  PROJECTS_DB.projects.push(projectDetails); \n  dispatch(createNewProject(projectDetails)); \n  \n  //for API \n  //save to new object, because values is not extensible for adding timestamp  \n  // let projectDetails = Object.assign({}, values); \n  // projectDetails.lastupdated = new Date().toISOString();\n  // return fetch(baseUrl + 'projects', {\n  //   method: 'POST',\n  //   body: JSON.stringify(projectDetails),\n  //   headers: {\n  //     'Content-Type': 'application/json'\n  //   },\n  //   credentials: 'same-origin'\n  // })\n  //   .then(response => {\n  //     if (response.ok) {\n  //       return response;\n  //     }\n  //     else {\n  //       var error = new Error('Error ' + response.status + ': ' + response.statusText);\n  //       error.response = response;\n  //       throw error;\n  //     }\n  //   },\n  //   error => {\n  //     var errmess= new Error(error.message);\n  //     throw errmess;\n  //   })\n  //   .then(response => response.json())\n  //   // Updating the redux store\n  //   .then(response => dispatch(createNewProject(response)))\n  //   .catch(error => {\n  //     console.log('Update project ', error.message);\n  //     alert('Your phase updates could not be posted\\nError: ' + error.message);\n  //   });\n\n}\n\nexport const createPhase = (proj_id, values) => (dispatch) => {\n  //simulating locally\n  const phases_len = PHASES_DB.phases.length; \n  let phasesDetails = Object.assign({}, values); \n  phasesDetails.lastupdated = new Date().toISOString();\n  phasesDetails.id = phases_len; \n  phasesDetails.projectId = proj_id; \n  PHASES_DB.phases.push(phasesDetails); \n  dispatch(createNewPhase(phasesDetails)); \n\n  //for API \n  //save to new object, because values is not extensible for adding timestamp  \n  // let phaseDetails = Object.assign({}, values); \n  // phaseDetails.lastupdated = new Date().toISOString();\n  // phaseDetails.projectId = proj_id; \n  // return fetch(baseUrl + 'phases', {\n  //   method: 'POST',\n  //   body: JSON.stringify(phaseDetails),\n  //   headers: {\n  //     'Content-Type': 'application/json'\n  //   },\n  //   credentials: 'same-origin'\n  // })\n  //   .then(response => {\n  //     if (response.ok) {\n  //       return response;\n  //     }\n  //     else {\n  //       var error = new Error('Error ' + response.status + ': ' + response.statusText);\n  //       error.response = response;\n  //       throw error;\n  //     }\n  //   },\n  //   error => {\n  //     var errmess= new Error(error.message);\n  //     throw errmess;\n  //   })\n  //   .then(response => response.json())\n  //   // Updating the redux store\n  //   .then(response => dispatch(createNewPhase(response)))\n  //   .catch(error => {\n  //     console.log('Update project ', error.message);\n  //     alert('Your phase updates could not be posted\\nError: ' + error.message);\n  //   });\n\n}\n\n// THUNK - Patch to update project details \nexport const updateProject = (proj_id, values) => (dispatch) => {\n  //Simulating locally \n  let projectUpdates = Object.assign({}, values); \n  projectUpdates.lastupdated = new Date().toISOString();\n  let proj_changed = Object.assign(PROJECTS_DB.projects[proj_id], projectUpdates); \n  PROJECTS_DB.projects[proj_id] = proj_changed; \n  dispatch(updateProj(proj_changed)); \n\n  //for API \n  //save to new object, because values is not extensible for adding timestamp  \n  // let projectUpdates = Object.assign({}, values); \n  // projectUpdates.lastupdated = new Date().toISOString();\n  // return fetch(baseUrl + 'projects/' + proj_id, {\n  //   method: 'PATCH',\n  //   body: JSON.stringify(projectUpdates),\n  //   headers: {\n  //     'Content-Type': 'application/json'\n  //   },\n  //   credentials: 'same-origin'\n  // })\n  //   .then(response => {\n  //     if (response.ok) {\n  //       return response;\n  //     }\n  //     else {\n  //       var error = new Error('Error ' + response.status + ': ' + response.statusText);\n  //       error.response = response;\n  //       throw error;\n  //     }\n  //   },\n  //   error => {\n  //     var errmess= new Error(error.message);\n  //     throw errmess;\n  //   })\n  //   .then(response => response.json())\n  //   // Updating the redux store\n  //   .then(response => dispatch(updateProj(response)))\n  //   .catch(error => {\n  //     console.log('Update project ', error.message);\n  //     alert('Your phase updates could not be posted\\nError: ' + error.message);\n  //   });\n\n}\n\n// THUNK - Patch to update project details \nexport const updatePhase = (phase_id, values) => (dispatch) => {\n  // Simulating Locally \n  let phaseUpdates = Object.assign({}, values); \n  phaseUpdates.lastupdated = new Date().toISOString();\n  let phase_changed = Object.assign(PHASES_DB.phases[phase_id], phaseUpdates); \n  PHASES_DB.phases[phase_id] = phase_changed; \n  dispatch(updatePhaseDetails(phase_changed)); \n  //for API \n  //save to new object, because values is not extensible for adding timestamp  \n  // let phaseUpdates = Object.assign({}, values); \n  // phaseUpdates.lastupdated = new Date().toISOString();\n  // return fetch(baseUrl + 'phases/' + phase_id, {\n  //   method: 'PATCH',\n  //   body: JSON.stringify(phaseUpdates),\n  //   headers: {\n  //     'Content-Type': 'application/json'\n  //   },\n  //   credentials: 'same-origin'\n  // })\n  //   .then(response => {\n  //     if (response.ok) {\n  //       return response;\n  //     }\n  //     else {\n  //       var error = new Error('Error ' + response.status + ': ' + response.statusText);\n  //       error.response = response;\n  //       throw error;\n  //     }\n  //   },\n  //   error => {\n  //     var errmess= new Error(error.message);\n  //     throw errmess;\n  //   })\n  //   .then(response => response.json())\n  //   // Updating the redux store\n  //   .then(response => dispatch(updatePhaseDetails(response)))\n  //   .catch(error => {\n  //     console.log('Update phase ', error.message);\n  //     alert('Your phase updates could not be posted\\nError: ' + error.message);\n  //   });\n\n}\n\n// More Actions\nexport const projectsLoading = () => ({\n  type: ActionTypes.PROJECTS_LOADING\n});\n\nexport const projectsFailed = (errmess) => ({\n  type: ActionTypes.PROJECTS_FAILED,\n  payload: errmess\n});\n\nexport const addProjects = (projects) => ({\n  type: ActionTypes.ADD_PROJECTS,\n  payload: projects\n});\n//create single project\nexport const createNewProject = (project) => ({\n  type: ActionTypes.CREATE_PROJECT,\n  payload: project\n});\n//create single phase\nexport const createNewPhase = (phase) => ({\n  type: ActionTypes.CREATE_PHASE,\n  payload: phase\n});\n//update single project\nexport const updateProj = (project) => ({\n  type: ActionTypes.UPDATE_PROJECT,\n  payload: project\n});\n\n//update single phase\nexport const updatePhaseDetails = (phase) => ({\n  type: ActionTypes.UPDATE_PHASE,\n  payload: phase\n});\n\n// More Actions for phases \nexport const phasesLoading = () => ({\n  type: ActionTypes.PHASES_LOADING\n});\n\nexport const phasesFailed = (errmess) => ({\n  type: ActionTypes.PHASES_FAILED,\n  payload: errmess\n});\n\nexport const addPhases = (phases) => ({\n  type: ActionTypes.ADD_PHASES,\n  payload: phases\n});\n\n//UI actions \n//could combineReducers here probably \nexport const initializeUserInterface = () => (dispatch) => {\n  const uiinitvals = {\n  projectDetails: {\n    open: false, \n    projectId: null\n  }, \n  phaseModal: {\n    open: false, \n    projectId: null\n  },\n  projectModal: {\n    open: false, \n    projectId: null\n  },\n}\n  dispatch({\n    type: ActionTypes.INITIALIZE_UI, \n    payload: uiinitvals\n  }); \n}\n\nexport const openDetails = (projectId) => (dispatch) => {\n  const details_project = {\n    open: true, \n    projectId: projectId\n  }\n  dispatch({\n    type: ActionTypes.DETAILS_OPEN, \n    payload: details_project\n  }); \n}\n\nexport const closeDetails = () => (dispatch) => {\n  const details_project = {\n      open: false, \n      projectSelected: null\n    }\n  dispatch({\n    type: ActionTypes.DETAILS_CLOSE, \n    payload: details_project\n  }); \n}\n\nexport const openPhaseUpdateModal = (phaseId) => (dispatch) => {\n  const details_phase = {\n    open: true, \n    phaseId: phaseId\n  }\n  dispatch({\n    type: ActionTypes.PHASE_UPDATE_MODAL_OPEN, \n    payload: details_phase\n  }); \n}\n\nexport const closePhaseUpdateModal = () => (dispatch) => {\n  const details_phase = {\n    open: false, \n    phaseId: null\n  }\n  dispatch({\n    type: ActionTypes.PHASE_UPDATE_MODAL_CLOSE, \n    payload: details_phase\n  }); \n}\n\nexport const openProjectUpdateModal = (projectId) => (dispatch) => {\n  const details_phase = {\n    open: true, \n    projectId: projectId\n  } \n  dispatch({\n    type: ActionTypes.PROJECT_UPDATE_MODAL_OPEN, \n    payload: details_phase\n  }); \n}\n\nexport const closeProjectUpdateModal = () => (dispatch) => {\n  const details_phase = {\n    open: false, \n    projectId: null\n  }\n  dispatch({\n    type: ActionTypes.PROJECT_UPDATE_MODAL_CLOSE, \n    payload: details_phase\n  }); \n}\n\nexport const openProjectCreateModal = () => (dispatch) => {\n  const details_phase = {\n    open: true \n  } \n  dispatch({\n    type: ActionTypes.PROJECT_CREATE_MODAL_OPEN, \n    payload: details_phase\n  }); \n}\n\nexport const closeProjectCreateModal = () => (dispatch) => {\n  const details_phase = {\n    open: false\n  }\n  dispatch({\n    type: ActionTypes.PROJECT_CREATE_MODAL_CLOSE, \n    payload: details_phase\n  }); \n}\n\nexport const openPhaseCreateModal = () => (dispatch) => {\n  const details_phase = {\n    open: true \n  } \n  dispatch({\n    type: ActionTypes.PHASE_CREATE_MODAL_OPEN, \n    payload: details_phase\n  }); \n}\n\nexport const closePhaseCreateModal = () => (dispatch) => {\n  const details_phase = {\n    open: false\n  }\n  dispatch({\n    type: ActionTypes.PHASE_CREATE_MODAL_CLOSE, \n    payload: details_phase\n  }); \n}\n","export const PROJECTS = {\n    \"projects\": [\n        {\n          \"id\": 0,\n          \"name\": \"React Front End\",\n          \"description\": \"First Project at AfterHours rebuilding components of ___ web app.\",\n          \"company\": 0,\n          \"complete\": false,\n          \"status\": false,\n          \"lastupdated\": \"2020-06-14T18:51:53.140Z\"\n        },\n        {\n          \"id\": 1,\n          \"name\": \"Django REST API\",\n          \"description\": \"First Project at AfterHours rebuilding components of ___ web app.\",\n          \"company\": 0,\n          \"complete\": false,\n          \"status\": false,\n          \"lastupdated\": \"2020-06-14T20:06:47.770Z\"\n        }\n    ]\n}","export const PHASES = {\n    \"phases\": [\n    {\n      \"id\": 0,\n      \"name\": \"Engineering\",\n      \"description\": \"Mechanical engineer will work on his assignment, and review with customer\",\n      \"start\": \"2020-06-10\",\n      \"end\": \"2020-06-19\",\n      \"people\": null,\n      \"active\": false,\n      \"complete\": true,\n      \"projectId\": 0,\n      \"lastupdated\": \"2020-06-14T20:03:00.107Z\"\n    },\n    {\n      \"id\": 1,\n      \"name\": \"Testing\",\n      \"description\": \"Mechanical engineer will work on his assignment, and review with customer\",\n      \"start\": \"2020-06-14\",\n      \"end\": \"2020-06-19\",\n      \"people\": null,\n      \"active\": true,\n      \"complete\": false,\n      \"projectId\": 0,\n      \"lastupdated\": \"2020-06-14T20:03:06.631Z\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Testing\",\n      \"description\": \"Mechanical engineer will work on his assignment, and review with customer\",\n      \"start\": \"2020-06-11\",\n      \"end\": \"2020-06-30\",\n      \"people\": null,\n      \"active\": true,\n      \"complete\": false,\n      \"projectId\": 1,\n      \"lastupdated\": \"2020-06-12T19:40:22.108Z\"\n    },\n    {\n      \"name\": \"Finishing - Paint \",\n      \"start\": \"2020-06-15\",\n      \"end\": \"2020-06-17\",\n      \"active\": false,\n      \"lastupdated\": \"2020-06-14T20:03:11.187Z\",\n      \"projectId\": 0,\n      \"id\": 3\n    }\n  ]\n}","//project types \nexport const ADD_PROJECTS = \"ADD_PROJECTS\"; \nexport const PROJECTS_LOADING = \"PROJECTS_LOADING\"; \nexport const PROJECTS_FAILED = \"PROJECTS_FAILED\"; \nexport const UPDATE_PROJECT = \"UPDATE_PROJECT\"; \nexport const CREATE_PROJECT = \"CREATE_PROJECT\"; \n//phase types \nexport const ADD_PHASES = \"ADD_PHASES\"; \nexport const PHASES_LOADING = \"PHASES_LOADING\"; \nexport const PHASES_FAILED = \"PHASES_FAILED\"; \nexport const UPDATE_PHASE = \"UPDATE_PHASE\";\nexport const CREATE_PHASE = \"CREATE_PHASE\";  \n//UI types \nexport const DETAILS_OPEN = \"DETAILS_OPEN\"; \nexport const INITIALIZE_UI = \"INITIALIZE_UI\";\nexport const DETAILS_CLOSE = \"DETAILS_CLOSE\";\nexport const PHASE_UPDATE_MODAL_OPEN = \"PHASE_MODAL_OPEN\";\nexport const PHASE_UPDATE_MODAL_CLOSE = \"PHASE_MODAL_CLOSE\";  \nexport const PROJECT_UPDATE_MODAL_OPEN = \"PROJECT_MODAL_OPEN\";  \nexport const PROJECT_UPDATE_MODAL_CLOSE = \"PROJECT_MODAL_CLOSE\"; \nexport const PROJECT_CREATE_MODAL_OPEN = \"PROJECT_CREATE_MODAL_OPEN\";\nexport const PROJECT_CREATE_MODAL_CLOSE = \"PROJECT_CREATE_MODAL_CLOSE\";\nexport const PHASE_CREATE_MODAL_OPEN = \"PHASE_CREATE_MODAL_OPEN\";  \nexport const PHASE_CREATE_MODAL_CLOSE = \"PHASE_CREATE_MODAL_CLOSE\";    ","import React, { Component } from 'react';\nimport Header from './HeaderComponent';\nimport Home from './HomeComponent';\nimport { Switch, Route, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { \n  fetchProjects, \n  fetchPhases, \n  updateProject, \n  updatePhase, \n  createProject, \n  createPhase,\n  closeDetails, \n  openDetails, \n  closePhaseUpdateModal, \n  openPhaseUpdateModal, \n  closeProjectUpdateModal,\n  openProjectUpdateModal, \n  openProjectCreateModal, \n  closeProjectCreateModal,\n  openPhaseCreateModal,\n  closePhaseCreateModal\n} from '../redux/ActionCreators';\n\nconst mapStateToProps = state => {\n  return {\n    projects: state.projects, \n    phases: state.phases, \n    userinterface: state.userinterface \n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchProjects: () => {dispatch(fetchProjects())}, \n  fetchPhases: () => {dispatch(fetchPhases())}, \n  updateProject: (proj_id, values) => {dispatch(updateProject(proj_id, values))}, \n  updatePhase: (phase_id, values) => {dispatch(updatePhase(phase_id, values))}, \n  closeDetails: () => {dispatch(closeDetails())}, \n  openDetails: (projectId) => {dispatch(openDetails(projectId))},\n  openPhaseUpdateModal: (phaseId) => {dispatch(openPhaseUpdateModal(phaseId))}, \n  closePhaseUpdateModal: () => {dispatch(closePhaseUpdateModal())},\n  openProjectUpdateModal: (projectId) => {dispatch(openProjectUpdateModal(projectId))}, \n  closeProjectUpdateModal: () => {dispatch(closeProjectUpdateModal())}, \n  openProjectCreateModal: () => {dispatch(openProjectCreateModal())}, \n  closeProjectCreateModal: () => {dispatch(closeProjectCreateModal())}, \n  openPhaseCreateModal: () => {dispatch(openPhaseCreateModal())}, \n  closePhaseCreateModal: () => {dispatch(closePhaseCreateModal())}, \n  createProject: (values) => {dispatch(createProject(values))}, \n  createPhase: (projectId, values) => {dispatch(createPhase(projectId, values))}\n});\n\nclass Main extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    console.log('Main component mounted'); \n    this.props.fetchProjects();\n    this.props.fetchPhases();\n  }\n\n  render () {\n      const HomePage = () => {\n        return(\n          <Home \n            projects={Object.values(this.props.projects.projects)} \n            projectsLoading={this.props.projects.isLoading} \n            updateProject={this.props.updateProject}\n            phases={Object.values(this.props.phases.phases)}\n            phasesLoading={this.props.phases.isLoading}\n            updatePhase={this.props.updatePhase}\n            createProject={this.props.createProject}\n            createPhase={this.props.createPhase}\n            projectDetails={this.props.userinterface.projectDetails}\n            phaseUpdateModal={this.props.userinterface.phaseUpdateModal}\n            projectUpdateModal={this.props.userinterface.projectUpdateModal}\n            phaseCreateModal={this.props.userinterface.phaseCreateModal}\n            projectCreateModal={this.props.userinterface.projectCreateModal}\n            openDetails={this.props.openDetails}\n            closeDetails={this.props.closeDetails}\n            openPhaseUpdateModal={this.props.openPhaseUpdateModal}\n            closePhaseUpdateModal={this.props.closePhaseUpdateModal}\n            openProjectUpdateModal={this.props.openProjectUpdateModal}\n            closeProjectUpdateModal={this.props.closeProjectUpdateModal}\n            openProjectCreateModal={this.props.openProjectCreateModal}\n            closeProjectCreateModal={this.props.closeProjectCreateModal}\n            openPhaseCreateModal={this.props.openPhaseCreateModal}\n            closePhaseCreateModal={this.props.closePhaseCreateModal}\n            />\n        ); \n      }\n\n      return(\n        <div className=\"main-container\">\n          <Header />\n          <Switch>\n            <Route path=\"/\" component={HomePage} />\n          </Switch>\n        </div>\n      );\n    }\n\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main)); \n","import * as ActionTypes from './ActionTypes';\n\nexport const Projects = (state = {\n    isLoading: true,\n    errMess: null,\n    projects: []\n  }, action) => {\n  switch(action.type) {\n    case ActionTypes.ADD_PROJECTS:\n      return {...state, isLoading: false, errMess: null, projects: action.payload};\n\n    case ActionTypes.PROJECTS_LOADING:\n      return {...state, isLoading: true, errMess: null, projects: []};\n\n    case ActionTypes.PROJECTS_FAILED:\n      return {...state, isLoading: false, errMess: action.payload, projects: []};\n    \n    case ActionTypes.UPDATE_PROJECT:\n      const project = action.payload; \n      const new_state = Object.assign({}, state); \n      new_state.projects[project.id] = project; \n      return {...state, projects: new_state.projects}; \n    \n    case ActionTypes.CREATE_PROJECT:\n      const new_project = action.payload; \n      const edit_state = Object.assign({}, state); \n      edit_state.projects[new_project.id] = new_project; \n      return {...state, projects: edit_state.projects}; \n\n    default:\n      return state;\n  }\n}","import * as ActionTypes from './ActionTypes';\n\nexport const Phases = (state = {\n    isLoading: true,\n    errMess: null,\n    phases: []\n  }, action) => {\n  switch(action.type) {\n    case ActionTypes.ADD_PHASES:\n      return {...state, isLoading: false, errMess: null, phases: action.payload};\n\n    case ActionTypes.PHASES_LOADING:\n      return {...state, isLoading: true, errMess: null, phases: []};\n\n    case ActionTypes.PHASES_FAILED:\n      return {...state, isLoading: false, errMess: action.payload, phases: []};\n    \n    case ActionTypes.UPDATE_PHASE:\n      const phase = action.payload; \n      const new_state = Object.assign({}, state); \n      new_state.phases[phase.id] = phase; \n      return {...state, phases: new_state.phases}; \n\n    case ActionTypes.CREATE_PHASE:\n      const new_phase = action.payload; \n      const edit_state = Object.assign({}, state); \n      edit_state.phases[new_phase.id] = new_phase; \n      return {...state, phases: edit_state.phases}; \n\n    default:\n      return state;\n  }\n}","import * as ActionTypes from './ActionTypes';\n\n\n//TODO: this seems too verbose - might look at refactoring to one reducer\nexport const UserInterface = (state = {\n  userinterface: null\n}, action) => {\n  switch(action.type) {\n\n    //Updating UI state for showing project details \n    case ActionTypes.DETAILS_OPEN:\n      const openProjectDetails = action.payload; \n      const opendetails_state = Object.assign({}, state); \n      opendetails_state.projectDetails = openProjectDetails; \n      return opendetails_state;\n\n    case ActionTypes.DETAILS_CLOSE: \n      const closeProjectDetails = action.payload; \n      const closedetails_state = Object.assign({}, state); \n      closedetails_state.projectDetails = closeProjectDetails; \n      return closedetails_state; \n\n    //Updating UI state for the update modal both phase and project\n    case ActionTypes.PHASE_UPDATE_MODAL_OPEN:\n      const openPhaseModal = action.payload; \n      const openphasemodal_state = Object.assign({}, state); \n      openphasemodal_state.phaseUpdateModal = openPhaseModal; \n      return openphasemodal_state; \n\n    case ActionTypes.PHASE_UPDATE_MODAL_CLOSE:\n      const closePhaseModal = action.payload; \n      const closephasemodal_state = Object.assign({}, state); \n      closephasemodal_state.phaseUpdateModal = closePhaseModal; \n      return closephasemodal_state; \n\n    case ActionTypes.PROJECT_UPDATE_MODAL_OPEN:\n      const openProjectModal = action.payload; \n      const openprojmodal_state = Object.assign({}, state); \n      openprojmodal_state.projectUpdateModal = openProjectModal; \n      return openprojmodal_state; \n\n    case ActionTypes.PROJECT_UPDATE_MODAL_CLOSE:\n      const closeProjectModal = action.payload; \n      const closeprojmodal_state = Object.assign({}, state); \n      closeprojmodal_state.projectUpdateModal = closeProjectModal; \n      return closeprojmodal_state; \n\n    //Updating UI State for creation modal both phase and project \n    case ActionTypes.PROJECT_CREATE_MODAL_OPEN:\n      const openProjectCreateModal = action.payload; \n      const openprojcrmodal_state = Object.assign({}, state); \n      openprojcrmodal_state.projectCreateModal = openProjectCreateModal; \n      return openprojcrmodal_state; \n\n    case ActionTypes.PROJECT_CREATE_MODAL_CLOSE:\n      const closeProjectCreateModal = action.payload; \n      const closeprojcrmodal_state = Object.assign({}, state); \n      closeprojcrmodal_state.projectCreateModal = closeProjectCreateModal; \n      return closeprojcrmodal_state; \n\n    case ActionTypes.PHASE_CREATE_MODAL_OPEN:\n      const openPhaseCreateModal = action.payload; \n      const openphasecrmodal_state = Object.assign({}, state); \n      openphasecrmodal_state.phaseCreateModal = openPhaseCreateModal; \n      return openphasecrmodal_state; \n\n    case ActionTypes.PHASE_CREATE_MODAL_CLOSE:\n      const closePhaseCreateModal = action.payload; \n      const closephasecrmodal_state = Object.assign({}, state); \n      closephasecrmodal_state.phaseCreateModal = closePhaseCreateModal; \n      return closephasecrmodal_state; \n\n\n    default:\n      return state;\n  }\n}","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Projects } from './projects';\nimport { Phases } from './phases';\nimport { UserInterface } from './ui'; \nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\nconst default_userinterface = {\n  projectDetails: {\n    open: false, \n    projectId: null\n  }, \n  phaseUpdateModal: {\n    open: false, \n    phaseId: null\n  },\n  projectUpdateModal: {\n    open: false, \n    projectId: null\n  }, \n  projectCreateModal: {\n    open: false \n  }, \n  phaseCreateModal: {\n    open: false \n  }\n}\n\nexport const ConfigureStore = () => {\n  const store = createStore(\n    combineReducers({\n      projects: Projects,\n      phases: Phases, \n      userinterface: UserInterface\n    }),\n    {\n      userinterface: default_userinterface\n    }, \n    applyMiddleware(thunk, logger)\n  );\n  return store;\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Main from './components/MainComponent';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { ConfigureStore } from './redux/configureStore';\n\nconst store = ConfigureStore();\n\nclass App extends Component {\n\n  render () {\n    return (\n      <Provider store={store}>\n      <BrowserRouter>\n        <Main />\n      </BrowserRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}